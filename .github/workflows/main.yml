name: Build, Test and Package

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches: [main]


env:
  BUILD_DIR: build
  PACKAGE_DIR: decorator-package
  ARTIFACTS_DIR: artifacts
  PACKAGE_NAME: decorator-app
  
jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      id: get_version
      run: |
        version=${GITHUB_REF#refs/tags/v}
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "PACKAGE_VERSION=${version}" >> $GITHUB_ENV

    - name: Set default version if not tagged
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      run: |
        echo "PACKAGE_VERSION=0.0.0" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          debhelper \
          dh-make \
          dpkg-dev \
          tree

    - name: Configure project
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake -DCMAKE_BUILD_TYPE=Release ..

    - name: Build project
      run: |
        cd ${{ env.BUILD_DIR }}
        make -j$(nproc)

    - name: List build artifacts (debug)
      run: |
        cd ${{ env.BUILD_DIR }}
        ls -la

    - name: Run tests
      run: |
        cd ${{ env.BUILD_DIR }}
        [ -f test_Window ] && ./test_Window
        [ -f test_FancyWindow ] && ./test_FancyWindow
        [ -f test_BorderDecorator ] && ./test_BorderDecorator
        [ -f test_ScrollBarDecorator ] && ./test_ScrollBarDecorator
        [ -f test_main ] && ./test_main

    - name: Prepare package structure
      run: |
        mkdir -p ${{ env.PACKAGE_DIR }}/usr/bin
        mkdir -p ${{ env.PACKAGE_DIR }}/DEBIAN
        
        # Копируем все исполняемые файлы
        find ${{ env.BUILD_DIR }} -maxdepth 1 -type f -executable -not -name "*.so" \
          -exec install -Dm755 {} ${{ env.PACKAGE_DIR }}/usr/bin/ \;

    - name: Generate control file
      run: |
        mkdir -p ${{ env.PACKAGE_DIR }}/DEBIAN
        cat <<EOF > ${{ env.PACKAGE_DIR }}/DEBIAN/control
        Package: ${{ env.PACKAGE_NAME }}
        Version: ${PACKAGE_VERSION}-$(date +%Y%m%d%H%M)
        Section: devel
        Priority: optional
        Architecture: amd64
        Maintainer: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
        Description: Decorator Pattern Implementation
        EOF

    - name: Verify package structure
      run: |
        tree ${{ env.PACKAGE_DIR }}
        cat ${{ env.PACKAGE_DIR }}/DEBIAN/control

    - name: Build .deb package
      run: |
        mkdir -p ${{ env.ARTIFACTS_DIR }}
        deb_file="${{ env.ARTIFACTS_DIR }}/${{ env.PACKAGE_NAME }}_${PACKAGE_VERSION}_amd64.deb"
        dpkg-deb --build ${{ env.PACKAGE_DIR }} "${deb_file}"
        echo "DEB_FILE=${deb_file}" >> $GITHUB_ENV

    - name: Verify .deb package
      run: |
        dpkg --info ${DEB_FILE}
        dpkg --contents ${DEB_FILE}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: decorator-package
        path: ${DEB_FILE}
        retention-days: 7
  
  create-release:
    needs: build-and-package
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: decorator-package
        path: ${{ runner.temp }}/package

    - name: List downloaded files (debug)
      run: |
        ls -la ${{ runner.temp }}/package

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release ${PACKAGE_VERSION}
        tag_name: ${{ github.ref }}
        body: |
          ### Decorator Pattern Implementation
          **Version**: ${PACKAGE_VERSION}
          **Commit**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          **Build date**: $(date -u)
        files: |
          ${{ runner.temp }}/package/*.deb
        draft: false
        prerelease: false
