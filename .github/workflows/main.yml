name: Build, Test and Package

on:
  push:
    tags:
      - 'v*'  # Только при создании тегов вида v1.0, v2.0 и т.д.
  pull_request:
    branches: [ main ]

env:
  BUILD_DIR: build
  PACKAGE_DIR: decorator-package  # Изменили на decorator-package для единообразия
  ARTIFACTS_DIR: artifacts
  PACKAGE_NAME: decorator-app
  
jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      id: get_version
      run: |
        version=${GITHUB_REF#refs/tags/v}
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "PACKAGE_VERSION=${version}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          debhelper \
          dh-make \
          dpkg-dev \
          tree

    - name: Configure project
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake -DCMAKE_BUILD_TYPE=Release ..

    - name: Build project
      run: |
        cd ${{ env.BUILD_DIR }}
        make -j$(nproc)

    - name: List build artifacts (debug)
      run: |
        cd ${{ env.BUILD_DIR }}
        ls -la

    - name: Run tests
      run: |
        cd ${{ env.BUILD_DIR }}
        [ -f test_Window ] && ./test_Window
        [ -f test_FancyWindow ] && ./test_FancyWindow
        [ -f test_BorderDecorator ] && ./test_BorderDecorator
        [ -f test_ScrollBarDecorator ] && ./test_ScrollBarDecorator
        [ -f test_main ] && ./test_main

    - name: Prepare package structure
      run: |
        mkdir -p ${{ env.PACKAGE_DIR }}/usr/bin
        mkdir -p ${{ env.PACKAGE_DIR }}/DEBIAN
        
        # Копируем все тестовые исполняемые файлы
        for test in test_Window test_FancyWindow test_BorderDecorator test_ScrollBarDecorator test_main; do
          if [ -f ${{ env.BUILD_DIR }}/$test ]; then
            install -Dm755 ${{ env.BUILD_DIR }}/$test ${{ env.PACKAGE_DIR }}/usr/bin/
          fi
        done

        # Если есть основной исполняемый файл, добавляем его тоже
        if [ -f ${{ env.BUILD_DIR }}/decorator_app ]; then
          install -Dm755 ${{ env.BUILD_DIR }}/decorator_app ${{ env.PACKAGE_DIR }}/usr/bin/
        fi

    - name: Generate control file
      run: |
        mkdir -p ${{ env.PACKAGE_DIR }}/DEBIAN
        cat <<EOF > ${{ env.PACKAGE_DIR }}/DEBIAN/control
        Package: ${{ env.PACKAGE_NAME }}
        Version: ${{ env.PACKAGE_VERSION }}-$(date +%Y%m%d%H%M)
        Section: devel
        Priority: optional
        Architecture: amd64
        Maintainer: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
        Description: Decorator Pattern Implementation
        EOF
        
    - name: Verify package structure
      run: |
        tree ${{ env.PACKAGE_DIR }}
        cat ${{ env.PACKAGE_DIR }}/DEBIAN/control

    - name: Build .deb package
      run: |
        mkdir -p ${{ env.ARTIFACTS_DIR }}
        dpkg-deb --build ${{ env.PACKAGE_DIR }} ${{ env.ARTIFACTS_DIR }}/${{ env.PACKAGE_NAME }}_${{ env.PACKAGE_VERSION }}_amd64.deb


    - name: Verify .deb package
      run: |
        dpkg --info ${{ env.ARTIFACTS_DIR }}/decorator-app_1.0_amd64.deb
        dpkg --contents ${{ env.ARTIFACTS_DIR }}/decorator-app_1.0_amd64.deb

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: decorator-package
        path: ${{ env.ARTIFACTS_DIR }}/decorator-app_1.0_amd64.deb
        retention-days: 7
  
  create-release:
      needs: build-and-package
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: decorator-package

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ env.PACKAGE_VERSION }}
          tag_name: ${{ github.ref }}
          body: |
            ### Decorator Pattern Implementation
            **Version**: ${{ env.PACKAGE_VERSION }}
            **Commit**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            **Build date**: $(date -u)
          files: |
            *.deb
          draft: false
          prerelease: false
