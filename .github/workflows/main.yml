name: Build, Test and Package

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches: [main]

env:
  BUILD_DIR: build
  PACKAGE_DIR: decorator-package
  ARTIFACTS_DIR: artifacts
  PACKAGE_NAME: decorator-app

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine package version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          version=${GITHUB_REF#refs/tags/v}
        elif [ -f VERSION ]; then
          version=$(cat VERSION)
        else
          version=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        fi
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "PACKAGE_VERSION=${version}" >> $GITHUB_ENV
        echo "Using version: ${version}"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          debhelper \
          dh-make \
          dpkg-dev \
          tree

    - name: Configure project
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake -DCMAKE_BUILD_TYPE=Release ..

    - name: Build project
      run: |
        cd ${{ env.BUILD_DIR }}
        make -j$(nproc)

    - name: Run tests
      run: |
        cd ${{ env.BUILD_DIR }}
        [ -f test_Window ] && ./test_Window
        [ -f test_FancyWindow ] && ./test_FancyWindow
        [ -f test_BorderDecorator ] && ./test_BorderDecorator
        [ -f test_ScrollBarDecorator ] && ./test_ScrollBarDecorator
        [ -f test_main ] && ./test_main

    - name: Prepare package structure
      run: |
        mkdir -p ${{ env.PACKAGE_DIR }}/usr/bin
        mkdir -p ${{ env.PACKAGE_DIR }}/DEBIAN
        find ${{ env.BUILD_DIR }} -maxdepth 1 -type f -executable -not -name "*.so" \
          -exec install -Dm755 {} ${{ env.PACKAGE_DIR }}/usr/bin/ \;

    - name: Generate control file
      run: |
        mkdir -p ${{ env.PACKAGE_DIR }}/DEBIAN
        cat <<EOF > ${{ env.PACKAGE_DIR }}/DEBIAN/control
        Package: ${{ env.PACKAGE_NAME }}
        Version: ${PACKAGE_VERSION}
        Section: devel
        Priority: optional
        Architecture: amd64
        Maintainer: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
        Description: Decorator Pattern Implementation
        EOF

    - name: Build .deb package
      id: build-package
      run: |
        mkdir -p ${{ env.ARTIFACTS_DIR }}
        DEB_FILE="${{ env.ARTIFACTS_DIR }}/${{ env.PACKAGE_NAME }}_${PACKAGE_VERSION}_amd64.deb"
        dpkg-deb --build ${{ env.PACKAGE_DIR }} "${DEB_FILE}"
        echo "DEB_FILE=${DEB_FILE}" >> $GITHUB_ENV
        echo "deb_file=${DEB_FILE}" >> $GITHUB_OUTPUT
        echo "Generated package:"
        ls -la ${{ env.ARTIFACTS_DIR }}
        if [ ! -f "${DEB_FILE}" ]; then
          echo "::error::DEB file was not created!"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ steps.build-package.outputs.deb_file }}
        retention-days: 7

    - name: Verify upload
      run: |
        echo "Attempting to upload: ${{ steps.build-package.outputs.deb_file }}"
        ls -la ${{ env.ARTIFACTS_DIR }}
        if [ -f "${{ steps.build-package.outputs.deb_file }}" ]; then
          echo "File exists and ready for upload"
        else
          echo "::error::File does not exist!"
          exit 1
        fi
        
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Необходимо для создания релиза
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: deb-package
        path: ${{ runner.temp }}/deb-pkg

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Автоматический токен
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ needs.build.outputs.version }}
        body: |
          ### Собранные артефакты
          * .deb пакет для Ubuntu/Debian
          * Версия: ${{ needs.build.outputs.version }}
          * Дата сборки: $(date -u '+%Y-%m-%d')
        draft: false
        prerelease: false
        files: |
          ${{ runner.temp }}/deb-pkg/*.deb
